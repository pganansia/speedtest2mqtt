name: Verify, Build and Push Image to Github

on:
  workflow_dispatch:
  schedule:
    - cron: '21 11 * * *'
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  anchore-build-scan:
    runs-on: ubuntu-latest
    permissions:
        actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
        contents: read # for actions/checkout to fetch code
        id-token: write
        security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    steps:
      - name: Check out the code
        uses: actions/checkout@v4.2.2
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest --build-arg TARGETARCH=amd64
      - name: Run the Anchore Grype scan action
        uses: anchore/scan-action@v6.3.0
        id: scan
        with:
          image: "localbuild/testimage:latest"
          fail-build: false
          output-format: sarif
          severity-cutoff: medium
          cache-db: true
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3.28.10
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
  build:
    runs-on: ubuntu-latest
    permissions:
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      contents: read # for actions/checkout to fetch code
      id-token: write
      packages: write
    steps:
      # Check out du package
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.9.1
        with:
          cosign-release: 'v2.4.3'
      - name: Check install!
        run: cosign version
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
